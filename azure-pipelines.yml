variables:
  solution: "**/*.sln"
  buildConfiguration: "Release"
  group: vars # azure pipelines variable group https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azdevops&tabs=yaml
trigger:
- master
- refs/tags/v*

resources:
- repo: self
  fetchDepth: 1
pool:
  vmImage: vs2017-win2016 # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#use-a-microsoft-hosted-agent

# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=vsts

steps:
  - task: gittools.gitversion.gitversion-task.GitVersion@3
    displayName: gitversion

  - task: DotNetCoreInstaller@0
    displayName: "dotnet install sdk"
    inputs:
      version: 2.2.100
      packageType: sdk

  - task: DotNetCoreCLI@2
    displayName: "dotnet restore"
    inputs:
      command: restore
      projects: "**/*.csproj"
      verbosityRestore: Normal

  - task: DotNetCoreCLI@2
    displayName: "dotnet build"
    env:
        "naos__secrets__vault__clientId": $(key-vault-clientId) # from vars group
        "naos__secrets__vault__clientSecret": $(key-vault-clientSecret) # from vars group
        "naos__secrets__vault__name": "naos"
    inputs:
      projects: "$(solution)"
      arguments: "--configuration $(buildConfiguration) /p:AssemblyVersion=$(GitVersion.AssemblySemVer);FileVersion=$(GitVersion.AssemblySemVer);InformationalVersion=$(GitVersion.InformationalVersion)"

  - task: DotNetCoreCLI@2
    displayName: "dotnet test"
    inputs:
      command: test
      projects: "**/*[Tt]ests/*UnitTests.csproj"
      arguments: "/p:Configuration=$(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.ArtifactStagingDirectory)/coverage.xml" # https://github.com/tonerdo/coverlet

  - task: Bash@3
    displayName: "codecov upload" # https://docs.codecov.io/docs/about-the-codecov-bash-uploader
    inputs:
      targetType: "filePath"
      filePath: "./tests/UnitTests/CodecovUploader.sh"
      workingDirectory: $(Build.ArtifactStagingDirectory)
      arguments: "-f coverage.xml -t ab9f66cb8aba4a6bb94d514065ee29d8 -B $(Build.SourceBranchName) -C $(Build.SourceVersion) -b $(Build.BuildNumber)"

  - task: DotNetCoreCLI@2
    displayName: "dotnet publish"
    inputs:
      command: publish
      publishWebProjects: True
      arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
      zipAfterPublish: True

  - task: DotNetCoreCLI@2
    displayName: "dotnet nuget pack"
    inputs:
      command: pack
      buildProperties: "Version=$(GitVersion.NuGetVersion)"
      verbosityPack: Normal

  - task: DotNetCoreCLI@2
    displayName: "dotnet nuget push"
    inputs:
      command: push
    enabled: false
    continueOnError: true

  - task: PublishBuildArtifacts@1
    displayName: "publish artifacts"
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
