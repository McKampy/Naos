# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=vsts
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/expressions?view=azure-devops

variables:
  solution: '**/*.sln'
  buildConfiguration: 'Release'
  publishWorkerService: false
  publishFunctionApp: false
  publishWebApp: true
  publishArtifacts: true
  nuGetPush: true
  nuGetFeed: '164130b9-cbc9-46a4-85b0-3bd84e74894d/151703fd-0d42-49db-a7a3-d22198435821' # https://vip32.pkgs.visualstudio.com/Naos/_packaging/naos/nuget/v3/index.json
  nuGetFeedType: 'internal' # 'external'
  deployEnabled: false
  deployAzureSubscription: 'Naos 22463ad3-c6d2-4e7e-911d-c50474250fa0' # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/resources?view=azure-devops#troubleshooting-authorization-for-a-yaml-pipeline
  deployAppName: 'naos-sample'
  vmImage: 'windows-latest' # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#use-a-microsoft-hosted-agent
  group: vars # azure pipelines variable group https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azdevops&tabs=yaml

trigger:
- master
- develop
- refs/tags/v*

resources:
- repo: self
  fetchDepth: 1

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImage)
    steps:
    - task: GitVersion@5 # alternative https://github.com/adamralph/minver
      displayName: Apply git version

    - task: DotNetCoreInstaller@2
      displayName: Install dotnet SDK
      inputs:
        version: 3.x
        packageType: sdk

    - task: DotNetCoreCLI@2 # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=azure-devops#restore-nuget-packages
      displayName: Restore project dependencies
      inputs:
        command: restore
        projects: '**/*.csproj'
        verbosityRestore: Normal
        feedsToUse: 'config'
        nugetConfigPath: 'nuget.config'

    - task: DotNetCoreCLI@2
      displayName: Build projects
      inputs:
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration) --no-restore /p:Version=$(GitVersion.NuGetVersionV2);AssemblyVersion=$(GitVersion.AssemblySemVer);FileVersion=$(GitVersion.AssemblySemVer);InformationalVersion=$(GitVersion.InformationalVersion)'
        # assembly versioning: https://pleasereleaseme.net/versioning-net-core-assemblies-in-azure-devops-isnt-straightforward-and-probably-wont-be-in-other-ci-cd-tools-either/

    - task: DotNetCoreCLI@2
      displayName: Run unit tests
      enabled: false
      env:
        'naos__secrets__vault__clientId': $(key-vault-clientId) # from vars group
        'naos__secrets__vault__clientSecret': $(key-vault-clientSecret) # from vars group
        'naos__secrets__vault__name': 'naos'
      inputs:
        command: test
        projects: '**/*[Tt]ests/*UnitTests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore --no-build'
        # arguments: '/p:Configuration=$(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=$(Build.ArtifactStagingDirectory)/coverage.xml' # https://github.com/tonerdo/coverlet

    - task: Bash@3
      displayName: "codecov upload" # https://docs.codecov.io/docs/about-the-codecov-bash-uploader
      enabled: false
      inputs:
        targetType: "filePath"
        filePath: "./tests/CodecovUploader.sh"
        workingDirectory: $(Build.ArtifactStagingDirectory)
        arguments: "-f coverage.xml -t b4c5d4f3-0f3a-470e-9d5d-4c63cba2e611 -B $(Build.SourceBranchName) -C $(Build.SourceVersion) -b $(Build.BuildNumber)"

    - task: PublishPipelineArtifact@0 # https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml
      displayName: Publish sources
      enabled: true
      inputs:
        artifactName: 'sources'
        targetPath: '$(Build.SourcesDirectory)'

    - task: DotNetCoreCLI@2
      displayName: Publish worker service
      enabled: true
      condition: eq(variables['publishWorkerService'], 'true')
      inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Application.WorkerService.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore --no-build --output $(System.DefaultWorkingDirectory)/artifacts'
        # self contained https://timheuer.com/blog/archive/2019/10/03/deploy-aspnet-core-applications-using-self-contained-dotnet-core.aspx?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+timheuer+%28Method+~+of+~+failed+by+Tim+Heuer%29
        zipAfterPublish: True

    - task: DotNetCoreCLI@2
      displayName: Publish web app
      enabled: true
      condition: eq(variables['publishWebApp'], 'true')
      inputs:
        command: publish
        publishWebProjects: True
        projects: '**/Application.Web.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore --no-build --output $(System.DefaultWorkingDirectory)/artifacts'
        # self contained https://timheuer.com/blog/archive/2019/10/03/deploy-aspnet-core-applications-using-self-contained-dotnet-core.aspx?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+timheuer+%28Method+~+of+~+failed+by+Tim+Heuer%29
        zipAfterPublish: True

    - task: DotNetCoreCLI@2
      displayName: Publish function app
      enabled: true
      condition: eq(variables['publishFunctionApp'], 'true')
      inputs:
        command: publish
        publishWebProjects: False
        projects: '**/Application.Functions.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore --no-build  --output $(System.DefaultWorkingDirectory)/artifacts'
        # self contained https://timheuer.com/blog/archive/2019/10/03/deploy-aspnet-core-applications-using-self-contained-dotnet-core.aspx?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+timheuer+%28Method+~+of+~+failed+by+Tim+Heuer%29
        zipAfterPublish: True

    - task: PublishPipelineArtifact@0 # https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml
      displayName: Publish pipeline artifacts
      enabled: true
      condition: eq(variables['publishArtifacts'], 'true')
      inputs:
        artifactName: 'artifacts'
        targetPath: '$(System.DefaultWorkingDirectory)/artifacts'

    - task: DotNetCoreCLI@2 # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=azure-devops#pack-nuget-packages
      displayName: Package nugets
      enabled: true
      condition: |
        and
        (
           eq(variables['nuGetPush'], 'true'),
           eq(variables['Build.SourceBranch'], 'refs/heads/master')
        )
      inputs:
        command: pack
        configuration: $(buildConfiguration)
        packagesToPack: '**/*.csproj'
        nobuild: true
        packDirectory: '$(System.DefaultWorkingDirectory)/packages'
        buildProperties: 'Version=$(GitVersion.NuGetVersion)'
        verbosityPack: Normal
#
    - task: DotNetCoreCLI@2 # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core?view=azure-devops#push-nuget-packages
      displayName: Push nugets # TODO: github package repository https://help.github.com/en/articles/about-github-package-registry#supported-clients-and-formats
      enabled: true
      condition: |
        and
        (
           eq(variables['nuGetPush'], 'true'),
           eq(variables['Build.SourceBranch'], 'refs/heads/master')
        )
      inputs:
        command: push
        packagesToPush: '$(System.DefaultWorkingDirectory)/packages/*.nupkg'
        nobuild: true
        publishVstsFeed: $(nuGetFeed)
        nuGetFeedType: $(nuGetFeedType)
        allowPackageConflicts: true

- stage: DeployDev
  displayName: Deploy stage (dev)
  condition: |
    and
    (
        eq(variables['deployEnabled'], 'true'),
        eq(variables['Build.SourceBranch'], 'refs/heads/develop')
    )
  jobs:
  - template: azure-pipelines-deploy.yml
    parameters:
      environment: 'dev'
      deployFunctionApp: false # $(publishFunctionApp)
      deployWebApp: true # $(publishWebApp)
      azureSubscription: $(deployAzureSubscription)
      appName: $(deployAppName)

- stage: DeployQas
  displayName: Deploy stage (qas)
  condition: |
    and
    (
        eq(variables['deployEnabled'], 'true'),
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
    )
  jobs:
  - template: azure-pipelines-deploy.yml
    parameters:
      environment: 'qas'
      deployFunctionApp: false # $(publishFunctionApp)
      deployWebApp: true # $(publishWebApp)
      azureSubscription: $(deployAzureSubscription)
      appName: $(deployAppName)

- stage: DeployPro
  displayName: Deploy stage (pro)
  condition: |
    and
    (
        eq(variables['deployEnabled'], 'true'),
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
    )
  jobs:
  - template: azure-pipelines-deploy.yml
    parameters:
      environment: 'pro'
      deployFunctionApp: false # $(publishFunctionApp)
      deployWebApp: true # $(publishWebApp)
      azureSubscription: $(deployAzureSubscription)
      appName: $(deployAppName)