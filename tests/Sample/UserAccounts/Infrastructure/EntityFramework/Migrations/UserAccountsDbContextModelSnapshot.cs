// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Naos.Sample.UserAccounts.Infrastructure;

namespace Naos.Sample.UserAccounts.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(UserAccountsDbContext))]
    partial class UserAccountsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("useraccounts")
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastVisitDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("RegisterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("UserVisits");
                });

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserAccount", b =>
                {
                    b.OwnsOne("Naos.Foundation.Domain.State", "State", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("CreatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deactivated")
                                .HasColumnType("bit");

                            b1.Property<string>("DeactivatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("DeactivatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeactivatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DeactivatedReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("DeletedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeletedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DeletedReason")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ExpiredBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("ExpiredDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("ExpiredDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastAccessedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("LastAccessedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("LastAccessedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("UpdatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("UpdatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UpdatedReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccounts");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Naos.Sample.UserAccounts.Domain.AdAccount", "AdAccount", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Domain")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("AdAccounts");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Naos.Sample.UserAccounts.Domain.UserAccountStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnName("Status")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccounts");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });
                });

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserVisit", b =>
                {
                    b.OwnsOne("Naos.Foundation.Domain.State", "State", b1 =>
                        {
                            b1.Property<Guid>("UserVisitId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CreatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("CreatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deactivated")
                                .HasColumnType("bit");

                            b1.Property<string>("DeactivatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("DeactivatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeactivatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DeactivatedReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool?>("Deleted")
                                .HasColumnType("bit");

                            b1.Property<string>("DeletedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("DeletedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("DeletedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DeletedReason")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ExpiredBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("ExpiredDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("ExpiredDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastAccessedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset?>("LastAccessedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("LastAccessedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UpdatedBy")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("UpdatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("UpdatedDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UpdatedReasons")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserVisitId");

                            b1.ToTable("UserVisits");

                            b1.WithOwner()
                                .HasForeignKey("UserVisitId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
