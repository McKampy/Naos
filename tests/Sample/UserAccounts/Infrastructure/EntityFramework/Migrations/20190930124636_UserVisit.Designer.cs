// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Naos.Sample.UserAccounts.Infrastructure;

namespace Naos.Sample.UserAccounts.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(UserAccountsDbContext))]
    [Migration("20190930124636_UserVisit")]
    partial class UserVisit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("IdentifierHash");

                    b.Property<DateTimeOffset?>("LastVisitDate");

                    b.Property<DateTimeOffset?>("RegisterDate");

                    b.Property<string>("TenantId");

                    b.Property<int>("VisitCount");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("IdentifierHash");

                    b.Property<string>("Region");

                    b.Property<string>("TenantId");

                    b.Property<DateTimeOffset?>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("UserVisits");
                });

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserAccount", b =>
                {
                    b.OwnsOne("Naos.Sample.UserAccounts.Domain.AdAccount", "AdAccount", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId");

                            b1.Property<string>("Domain");

                            b1.Property<string>("Name");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("AdAccounts");

                            b1.HasOne("Naos.Sample.UserAccounts.Domain.UserAccount")
                                .WithOne("AdAccount")
                                .HasForeignKey("Naos.Sample.UserAccounts.Domain.AdAccount", "UserAccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Naos.Foundation.Domain.State", "State", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId");

                            b1.Property<string>("CreatedBy");

                            b1.Property<DateTimeOffset>("CreatedDate");

                            b1.Property<string>("CreatedDescription");

                            b1.Property<bool?>("Deactivated");

                            b1.Property<string>("DeactivatedBy");

                            b1.Property<DateTimeOffset?>("DeactivatedDate");

                            b1.Property<string>("DeactivatedDescription");

                            b1.Property<string>("DeactivatedReasons");

                            b1.Property<bool?>("Deleted");

                            b1.Property<string>("DeletedBy");

                            b1.Property<DateTimeOffset?>("DeletedDate");

                            b1.Property<string>("DeletedDescription");

                            b1.Property<string>("DeletedReason");

                            b1.Property<string>("ExpiredBy");

                            b1.Property<DateTimeOffset?>("ExpiredDate");

                            b1.Property<string>("ExpiredDescription");

                            b1.Property<string>("LastAccessedBy");

                            b1.Property<DateTimeOffset?>("LastAccessedDate");

                            b1.Property<string>("LastAccessedDescription");

                            b1.Property<string>("UpdatedBy");

                            b1.Property<DateTimeOffset>("UpdatedDate");

                            b1.Property<string>("UpdatedDescription");

                            b1.Property<string>("UpdatedReasons");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccounts");

                            b1.HasOne("Naos.Sample.UserAccounts.Domain.UserAccount")
                                .WithOne("State")
                                .HasForeignKey("Naos.Foundation.Domain.State", "UserAccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Naos.Sample.UserAccounts.Domain.UserVisit", b =>
                {
                    b.OwnsOne("Naos.Foundation.Domain.State", "State", b1 =>
                        {
                            b1.Property<Guid>("UserVisitId");

                            b1.Property<string>("CreatedBy");

                            b1.Property<DateTimeOffset>("CreatedDate");

                            b1.Property<string>("CreatedDescription");

                            b1.Property<bool?>("Deactivated");

                            b1.Property<string>("DeactivatedBy");

                            b1.Property<DateTimeOffset?>("DeactivatedDate");

                            b1.Property<string>("DeactivatedDescription");

                            b1.Property<string>("DeactivatedReasons");

                            b1.Property<bool?>("Deleted");

                            b1.Property<string>("DeletedBy");

                            b1.Property<DateTimeOffset?>("DeletedDate");

                            b1.Property<string>("DeletedDescription");

                            b1.Property<string>("DeletedReason");

                            b1.Property<string>("ExpiredBy");

                            b1.Property<DateTimeOffset?>("ExpiredDate");

                            b1.Property<string>("ExpiredDescription");

                            b1.Property<string>("LastAccessedBy");

                            b1.Property<DateTimeOffset?>("LastAccessedDate");

                            b1.Property<string>("LastAccessedDescription");

                            b1.Property<string>("UpdatedBy");

                            b1.Property<DateTimeOffset>("UpdatedDate");

                            b1.Property<string>("UpdatedDescription");

                            b1.Property<string>("UpdatedReasons");

                            b1.HasKey("UserVisitId");

                            b1.ToTable("UserVisits");

                            b1.HasOne("Naos.Sample.UserAccounts.Domain.UserVisit")
                                .WithOne("State")
                                .HasForeignKey("Naos.Foundation.Domain.State", "UserVisitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
